package YoutubeDesktop;
//import chrriis.dj.nativeswing.swtimpl.NativeInterface;
//import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import Clases.*;
import Codigo.*;
import chrriis.dj.nativeswing.swtimpl.NativeInterface;
import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import chrriis.dj.nativeswing.swtimpl.components.JFlashPlayer;
import java.awt.BorderLayout;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import sun.util.calendar.Gregorian;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Usa la API http://djproject.sourceforge.net/ns/ para embeber el video de
 * youtube, sigue y adapta el ejemplo que hay en
 * https://www.youtube.com/watch?v=GKiHB5AzihE Muestra una lista de videos
 *
 * @author (Milton Jesús Vera Contreras - miljeveco@ufps.edu.co)
 * @version Math.sin(Math.PI-Double.MIN_VALUE) :)
 */
public class MyYoutuberListView extends javax.swing.JFrame {
    
    
    
    Youtuber youtuber;
    
    //public persona personaingresar;
    
    Video video;
    int acumuladorDeVideos;
    int acumuladorDeYoutuber;
    int acumuladorDeYoutuberFollower;
    String videoseleccionadoy = null;
    
    
    public MyYoutuberListView() {
        
          initComponents();
          panelReproductor.setLayout(new BorderLayout());
          this.setLocationRelativeTo(null);
          
         // panelReproductor.add(getBrowserPanel(), BorderLayout.CENTER);
//        youtuber = new Youtuber();
//        video = new Video();
//        this.acumuladorDeVideos = 0;
//        this.acumuladorDeYoutuber = 0;
//        this.acumuladorDeYoutuberFollower = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pestanaYoutubers = new javax.swing.JTabbedPane();
        panelArtistas = new javax.swing.JPanel();
        lblTituloYoutubers = new javax.swing.JLabel();
        panelDatosArtista = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nom = new javax.swing.JTextField();
        id = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        gy = new javax.swing.JTable();
        panelVideos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gridVideos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        listay = new javax.swing.JComboBox();
        urlv = new javax.swing.JTextField();
        titulov = new javax.swing.JTextField();
        panelBusquedas = new javax.swing.JPanel();
        lblBusquedas = new javax.swing.JLabel();
        gridBusqueda = new javax.swing.JScrollPane();
        tableBusquedas = new javax.swing.JTable();
        panelFollowers = new javax.swing.JPanel();
        panelDatosArtista1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nomyf = new javax.swing.JTextField();
        idyf = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        gyf = new javax.swing.JTable();
        lblTituloYoutubers1 = new javax.swing.JLabel();
        panelReproductor = new javax.swing.JPanel();
        lblVideos = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblVideos1 = new javax.swing.JLabel();
        lblVideos2 = new javax.swing.JLabel();
        listayoutubers = new javax.swing.JComboBox<>();
        listavideos = new javax.swing.JComboBox<>();
        PanelVideos = new javax.swing.JPanel();
        panelBotones = new javax.swing.JPanel();
        cmdAgregar = new javax.swing.JButton();
        cmdeEliminar = new javax.swing.JButton();
        cmdBuscar = new javax.swing.JButton();
        cmdReproducir = new javax.swing.JButton();
        cmdGuardar = new javax.swing.JButton();
        panelTitulo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        pestanaYoutubers.setBackground(new java.awt.Color(255, 255, 255));
        pestanaYoutubers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pestanaYoutubers.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        pestanaYoutubers.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        panelArtistas.setBackground(new java.awt.Color(255, 255, 255));
        panelArtistas.setLayout(new java.awt.BorderLayout());

        lblTituloYoutubers.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblTituloYoutubers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTituloYoutubers.setText("Lista de Youtubers");
        lblTituloYoutubers.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelArtistas.add(lblTituloYoutubers, java.awt.BorderLayout.PAGE_START);

        panelDatosArtista.setBackground(new java.awt.Color(255, 255, 255));
        panelDatosArtista.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel2.setText("Fecha de Nacimiento");
        panelDatosArtista.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 170, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel3.setText("Identificación");
        panelDatosArtista.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 120, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel4.setText("Nombres");
        panelDatosArtista.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 120, -1));
        panelDatosArtista.add(nom, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 380, -1));
        panelDatosArtista.add(id, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 380, -1));

        gy.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        gy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre Youtuber", "Fecha de Nacimiento", "Cantidad de Videos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(gy);

        panelDatosArtista.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 760, 210));

        panelArtistas.add(panelDatosArtista, java.awt.BorderLayout.CENTER);

        pestanaYoutubers.addTab("Youtubers", panelArtistas);

        panelVideos.setBackground(new java.awt.Color(255, 255, 255));
        panelVideos.setPreferredSize(new java.awt.Dimension(600, 300));
        panelVideos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        gridVideos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Youtuber", "Título", "URL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(gridVideos);

        panelVideos.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 152, 760, 190));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lista de Videos");
        panelVideos.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 20));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel8.setText("URL Video");
        panelVideos.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 108, 100, -1));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel9.setText("Youtuber");
        panelVideos.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 100, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel10.setText("Titulo Video");
        panelVideos.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 100, 20));

        listay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listayMouseClicked(evt);
            }
        });
        listay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listayActionPerformed(evt);
            }
        });
        panelVideos.add(listay, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 380, -1));
        panelVideos.add(urlv, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 380, -1));
        panelVideos.add(titulov, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 380, -1));

        pestanaYoutubers.addTab("Videos", panelVideos);

        panelBusquedas.setBackground(new java.awt.Color(255, 255, 255));
        panelBusquedas.setPreferredSize(new java.awt.Dimension(600, 300));
        panelBusquedas.setLayout(new java.awt.BorderLayout());

        lblBusquedas.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblBusquedas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBusquedas.setText("Búsqueda de Youtubers y Videos");
        panelBusquedas.add(lblBusquedas, java.awt.BorderLayout.PAGE_START);

        tableBusquedas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Youtuber", "Video", "URL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        gridBusqueda.setViewportView(tableBusquedas);

        panelBusquedas.add(gridBusqueda, java.awt.BorderLayout.CENTER);

        pestanaYoutubers.addTab("Búsquedas", panelBusquedas);

        panelDatosArtista1.setBackground(new java.awt.Color(255, 255, 255));
        panelDatosArtista1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel5.setText("Fecha de Nacimiento");
        panelDatosArtista1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, -1));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel6.setText("Identificación");
        panelDatosArtista1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 120, -1));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel7.setText("Nombres");
        panelDatosArtista1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 120, -1));
        panelDatosArtista1.add(nomyf, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 380, -1));
        panelDatosArtista1.add(idyf, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 380, -1));

        gyf.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        gyf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre YoutuberFollower", "Fecha de Nacimiento YoutuberFollower"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(gyf);

        panelDatosArtista1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 760, 210));

        lblTituloYoutubers1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblTituloYoutubers1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTituloYoutubers1.setText("Lista de YoutubersFollower");
        lblTituloYoutubers1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelFollowersLayout = new javax.swing.GroupLayout(panelFollowers);
        panelFollowers.setLayout(panelFollowersLayout);
        panelFollowersLayout.setHorizontalGroup(
            panelFollowersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFollowersLayout.createSequentialGroup()
                .addComponent(lblTituloYoutubers1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 46, Short.MAX_VALUE))
            .addGroup(panelFollowersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelDatosArtista1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFollowersLayout.setVerticalGroup(
            panelFollowersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFollowersLayout.createSequentialGroup()
                .addComponent(lblTituloYoutubers1)
                .addGap(0, 320, Short.MAX_VALUE))
            .addGroup(panelFollowersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelFollowersLayout.createSequentialGroup()
                    .addComponent(panelDatosArtista1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 11, Short.MAX_VALUE)))
        );

        pestanaYoutubers.addTab("Followers", panelFollowers);

        panelReproductor.setBackground(new java.awt.Color(255, 255, 255));
        panelReproductor.setLayout(new java.awt.BorderLayout());

        lblVideos.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblVideos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVideos.setText("Reproducción de Videos");
        lblVideos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelReproductor.add(lblVideos, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblVideos1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblVideos1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVideos1.setText("Video Youtuber");
        lblVideos1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblVideos2.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblVideos2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVideos2.setText("Youtuber");
        lblVideos2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        listayoutubers.setToolTipText("");
        listayoutubers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listayoutubersMouseClicked(evt);
            }
        });

        PanelVideos.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblVideos2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listayoutubers, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PanelVideos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblVideos1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listavideos, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(79, 79, 79))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVideos2)
                    .addComponent(listayoutubers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVideos1)
                    .addComponent(listavideos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(PanelVideos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelReproductor.add(jPanel1, java.awt.BorderLayout.CENTER);

        pestanaYoutubers.addTab("Reproducción", panelReproductor);

        getContentPane().add(pestanaYoutubers, java.awt.BorderLayout.CENTER);

        panelBotones.setBackground(new java.awt.Color(255, 255, 255));
        panelBotones.setLayout(new java.awt.GridLayout(1, 5));

        cmdAgregar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmdAgregar.setText("Agregar");
        cmdAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgregarActionPerformed(evt);
            }
        });
        panelBotones.add(cmdAgregar);

        cmdeEliminar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmdeEliminar.setText("Eliminar");
        cmdeEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdeEliminarActionPerformed(evt);
            }
        });
        panelBotones.add(cmdeEliminar);

        cmdBuscar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmdBuscar.setText("Buscar");
        cmdBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBuscarActionPerformed(evt);
            }
        });
        panelBotones.add(cmdBuscar);

        cmdReproducir.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmdReproducir.setText("Reproducir");
        cmdReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReproducirActionPerformed(evt);
            }
        });
        panelBotones.add(cmdReproducir);

        cmdGuardar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmdGuardar.setText("Guardar en Disco");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });
        panelBotones.add(cmdGuardar);

        getContentPane().add(panelBotones, java.awt.BorderLayout.SOUTH);

        panelTitulo.setBackground(new java.awt.Color(255, 255, 255));
        panelTitulo.setLayout(new java.awt.BorderLayout());

        lblTitulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelTitulo.add(lblTitulo, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelTitulo, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReproducirActionPerformed
        //pestanaYoutubers.setSelectedIndex(3);
        
        String youtuberse = null;
        String videosse = null;
        
        if(listayoutubers.getSelectedItem()!= null && listavideos.getSelectedItem()!=null){
            
            youtuberse= (String) listayoutubers.getSelectedItem();
            
            videosse = (String) listavideos.getSelectedItem();
            
            personas videoreproducirpanel = new personas();
            
            video videoseleccionado = new video();
            
            videoseleccionado = videoreproducirpanel.seleccionarVideoReproducir(youtuberse, videosse);
            
            System.out.println("Video a reproducir ->"+videoseleccionado.getURLvideo());
            
            videoseleccionadoy = videoseleccionado.getURLvideo();
            
            //if(videoy != null){
                
                    //JWebBrowser webBrowser=new JWebBrowser();
                    //PanelVideos.setBorder(BorderFactory.createTitledBorder("Video Youtube"));
                    //webBrowser.setBarsVisible(false);
                    //webBrowser.setMenuBarVisible(false);
                    //webBrowser.setStatusBarVisible(false);
                    //webBrowser.navigate(videoy);
                    //PanelVideos.add(webBrowser, BorderLayout.CENTER);
                    //PanelVideos.setSize(300, 200);
                    
                    JFrame frame = new JFrame("Video Youtube");
                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    frame.getContentPane().add(getBrowser(videoseleccionadoy), BorderLayout.CENTER);
                    frame.setSize(600,500);
                    frame.setLocationRelativeTo(null);
                    frame.setVisible(true);

            //}
            
        
        }
        
    }//GEN-LAST:event_cmdReproducirActionPerformed

    private void cmdeEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdeEliminarActionPerformed
        
        //Eliminar Youtuber se debe colocar la identificación o nombre del Youtuber
        String elidyoutuber= id.getText();
        String elnomyoutuber = nom.getText();
        int idyou= 0;
        boolean eliyoutuber = false;
        
        if((!elidyoutuber.isEmpty() && !elidyoutuber.equals("") && elidyoutuber!=null) ||
            (!elnomyoutuber.isEmpty() && !elnomyoutuber.equals("") && elnomyoutuber!=null))
        {
            personas eliminary = new personas();
            idyou = Integer.parseInt(elidyoutuber);
            
            eliyoutuber = eliminary.eliminarYoutuber(idyou, elnomyoutuber);
            
            if(eliyoutuber){
                String[] titulos = {"Nombre Youtuber","Fecha de Nacimiento","Cantidad de videos"};
                DefaultTableModel modelo1 = new DefaultTableModel(null, titulos);

                for (int i = 0; i < modelo1.getRowCount(); i++) {
                    modelo1.removeRow(i);
                    i-=1;
                }
                
                gy.setModel(modelo1);
                gy.repaint();

                id.setText("");
                nom.setText("");
                fn.setCalendar(null);
                System.out.println("Elimino correctamente");
            }
            else{
              System.out.println("No elimino correctamente");
            }
        
        }
        
        //Eliminar YoutuberFollower se debe colocar identificación o nombre del YoutuberFollower
        String elidyoutuberfollower= idyf.getText();
        String elnomyoutuberfollower = nomyf.getText();
        int idyfo= 0;
        boolean eliyoutuberf = false;
        
        if((!elidyoutuberfollower.isEmpty() && !elidyoutuberfollower.equals("") && elidyoutuberfollower!=null) ||
            (!elnomyoutuberfollower.isEmpty() && !elnomyoutuberfollower.equals("") && elnomyoutuberfollower!=null))
        {
            personas eliminaryf = new personas();
            idyfo = Integer.parseInt(elidyoutuberfollower);
            
            eliyoutuberf = eliminaryf.eliminarYoutuberFollower(idyfo, elnomyoutuber);
            
            if(eliyoutuberf){
                String[] titulos = {"Nombre YoutuberFollower","Fecha de Nacimiento"};
                DefaultTableModel modelo1 = new DefaultTableModel(null, titulos);

                for (int i = 0; i < modelo1.getRowCount(); i++) {
                    modelo1.removeRow(i);
                    i-=1;
                }
                
                gyf.setModel(modelo1);
                gyf.repaint();

                idyf.setText("");
                nomyf.setText("");
                fnyf.setCalendar(null);
                System.out.println("Elimino correctamente");
            }
            else{
              System.out.println("No elimino correctamente");
            }
            
        }
        
        //Eliminar un video del Youtuber se debe ingresar el nombre, titulo y url del video del youtuber
        String elimvideoyoutuber = null;
        String elimtitulovideo = null;
        String elimurlvideo = null;
            
        elimtitulovideo = titulov.getText();
        elimurlvideo = urlv.getText();
            
        if((listay.getSelectedItem()!=null) &&
        (! elimtitulovideo.isEmpty() && ! elimtitulovideo.equals("") &&  elimtitulovideo!=null) &&    
        (! elimurlvideo.isEmpty() && ! elimurlvideo.equals("") &&  elimurlvideo!=null))
        {
                ArrayList<video> videosYou = new ArrayList<video>();
                ArrayList<persona> persGeneral = new ArrayList<persona>();
                
                
                elimvideoyoutuber = (String) listay.getSelectedItem();
                video elvideoyoutuber = new video();
                persona elimpersonavideo = null;
                //Creo la instancia personas que se encuentra en la clasificación de las personas
                personas eliminarvideo = new personas();
                
                elimpersonavideo = eliminarvideo.videoYoutuber(elimvideoyoutuber);
                
                elvideoyoutuber.setIdyoutubervideo(elimpersonavideo.getIdpersona());
                elvideoyoutuber.setTitulovideo(elimtitulovideo);
                elvideoyoutuber.setURLvideo(elimurlvideo);
                
                //Eliminar video del youtuber
                eliminarvideo.eliminarVideoYoutuber(elvideoyoutuber);
                
                videosYou = eliminarvideo.buscarYoutuberVideo(elimpersonavideo.getIdpersona());
            
                persGeneral = eliminarvideo.listaPersonasTodas();

                DefaultTableModel modelo1 = (DefaultTableModel) gridVideos.getModel();

                for (int i = 0; i < gridVideos.getRowCount(); i++) {
                    modelo1.removeRow(i);
                    i-=1;
                }
            
                String[] titulos = {"Youtuber","Titulo","URL"};
                DefaultTableModel mod2 = new DefaultTableModel(null, titulos);
                Object[] registros = new Object[3];
                
                for( int j = 0 ; j  < videosYou.size(); j++){
                    
                        for(int l = 0; l < persGeneral.size(); l++){
                            if(videosYou.get(j).getIdyoutubervideo() == persGeneral.get(l).getIdpersona()){
                                registros[0] = persGeneral.get(l).getNombres();
                            }
                        }   
                               
                        registros[1] = videosYou.get(j).getTitulovideo();
                        registros[2] = videosYou.get(j).getURLvideo();
                        mod2.addRow(registros);                    
                        
                }
                
                gridVideos.setModel(mod2);
                gridVideos.repaint();
                
                titulov.setText("");
                urlv.setText("");
                listay.setSelectedItem(null);
                    
        }

    }//GEN-LAST:event_cmdeEliminarActionPerformed

    private void cmdBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBuscarActionPerformed
        // TODO add your handling code here:
        
        //Gestionar Youtuber
        String idyfol = null;
        String nombreyf = null;
        int idy=0;
        
        idyfol = id.getText();
        nombreyf = nom.getText();
        
        if((!idyfol.isEmpty() && !idyfol.equals("") && idyfol!=null) ||
            (!nombreyf.isEmpty() && !nombreyf.equals("") && nombreyf!=null))
        {
            
            persona personalyoutuber = null;
            personas consultary = new personas();
            idy = Integer.parseInt(idyfol);
            
            personalyoutuber = consultary.consultarYoutuber(idy, nombreyf);
            
            if(personalyoutuber!=null){
                
                id.setText(String.valueOf(personalyoutuber.getIdpersona()));
                nom.setText(personalyoutuber.getNombres());
                String diacy= String.valueOf(personalyoutuber.getFechanacimiento().getDia());
                String mescy = String.valueOf(personalyoutuber.getFechanacimiento().getMes());
                String anualcy = String.valueOf(personalyoutuber.getFechanacimiento().getAnual());

                String fechapersonaly = diacy+"/"+mescy+"/"+anualcy+"";

                try {
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    Date fechaDate = formato.parse(fechapersonaly);
                    fn.setDate(fechaDate);
                } catch (ParseException ex) {
                    Logger.getLogger(MyYoutuberListView.class.getName()).log(Level.SEVERE, null, ex);
                }



                String[] titulos = {"Nombre Youtuber","Fecha de Nacimiento","Cantidad de videos"};
                DefaultTableModel model1 = new DefaultTableModel(null, titulos);
                Object[] registros = new Object[3];


                    registros[0] = personalyoutuber.getNombres();
                    registros[1] = fechapersonaly;

                    //System.out.println("lista ----> i "+pyoutuber.get(i).getNombres());
                    model1.addRow(registros);

                gy.setModel(model1);
                gy.repaint();
            
            }
            else{
                System.out.println("No existe persona");
            }
            
        }
        
        //Gestionar Youtuber Follower
        
        String idyfollower = null;
        String nomyfollower = null;
        int idyfoll = 0;
        
        idyfollower = idyf.getText();
        nomyfollower = nomyf.getText();
        
        if((!idyfollower.isEmpty() && !idyfollower.equals("") && idyfollower!=null) ||
            (!nomyfollower.isEmpty() && !nomyfollower.equals("") && nomyfollower!=null))
        {
            
            persona personalyoutuberf = null;
            personas consultaryf = new personas();
            idyfoll = Integer.parseInt(idyfollower);
            
            
            personalyoutuberf = consultaryf.consultarYoutuberFollower(idyfoll, nomyfollower);
            
            if(personalyoutuberf!=null){
                
                idyf.setText(String.valueOf(personalyoutuberf.getIdpersona()));
                nomyf.setText(personalyoutuberf.getNombres());
                String diacyf= String.valueOf(personalyoutuberf.getFechanacimiento().getDia());
                String mescyf = String.valueOf(personalyoutuberf.getFechanacimiento().getMes());
                String anualcyf = String.valueOf(personalyoutuberf.getFechanacimiento().getAnual());

                String fechapersonalyf = diacyf+"/"+mescyf+"/"+anualcyf+"";

                try {
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    Date fechaDate = formato.parse(fechapersonalyf);
                    fnyf.setDate(fechaDate);
                } catch (ParseException ex) {
                    Logger.getLogger(MyYoutuberListView.class.getName()).log(Level.SEVERE, null, ex);
                }

                String[] titulos = {"Nombre YoutuberFollower","Fecha de Nacimiento"};
                DefaultTableModel model1 = new DefaultTableModel(null, titulos);
                Object[] registros = new Object[3];


                    registros[0] = personalyoutuberf.getNombres();
                    registros[1] = fechapersonalyf;

                    //System.out.println("lista ----> i "+pyoutuber.get(i).getNombres());
                    model1.addRow(registros);

                gyf.setModel(model1);
                gyf.repaint();
            
            }
            else{
                System.out.println("No existe persona");
            }
            
        }
        
        
        //Gestionar videos youtuber
        String youtuberbuscar = null;
        
        if(listay.getSelectedItem()!=null){
            
            ArrayList<video> videosYou = new ArrayList<video>();
            ArrayList<persona> persGeneral = new ArrayList<persona>();
            
            youtuberbuscar = (String) listay.getSelectedItem();
            
            persona personabuscar = null;
            //Creo la instancia personas que se encuentra en la clasificación de las personas
            personas buscarvideos = new personas();
                
            personabuscar = buscarvideos.videoYoutuber(youtuberbuscar);
            
            videosYou = buscarvideos.buscarYoutuberVideo(personabuscar.getIdpersona());
            
            persGeneral = buscarvideos.listaPersonasTodas();
            
            DefaultTableModel modelo1 = (DefaultTableModel) gridVideos.getModel();
            
            for (int i = 0; i < gridVideos.getRowCount(); i++) {
                modelo1.removeRow(i);
                i-=1;
            }
            
            String[] titulos = {"Youtuber","Titulo","URL"};
            DefaultTableModel mod2 = new DefaultTableModel(null, titulos);
            Object[] registros = new Object[3];
                
                for( int j = 0 ; j  < videosYou.size(); j++){
                    
                        for(int l = 0; l < persGeneral.size(); l++){
                            if(videosYou.get(j).getIdyoutubervideo() == persGeneral.get(l).getIdpersona()){
                                registros[0] = persGeneral.get(l).getNombres();
                            }
                        }   
                               
                        registros[1] = videosYou.get(j).getTitulovideo();
                        registros[2] = videosYou.get(j).getURLvideo();
                        mod2.addRow(registros);                    
                        
                }
                
                gridVideos.setModel(mod2);
                gridVideos.repaint();
            
        }
                
        
    }//GEN-LAST:event_cmdBuscarActionPerformed

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgregarActionPerformed
        //Gregorian fn = null;

        String idenpersona = null;
        String nombrepersona = null;
        String fechanacimiento = null;
        ArrayList<persona> pyoutuber = new ArrayList <persona> ();
        
        idenpersona = id.getText();
        nombrepersona = nom.getText();
        
        
        if((!idenpersona.isEmpty() && !idenpersona.equals("") && idenpersona!=null) &&
            (!nombrepersona.isEmpty() && !nombrepersona.equals("") && nombrepersona!=null) &&    
             fn.getDate()!=null)
        {   
            int año = fn.getCalendar().get(Calendar.YEAR);
            int mes = fn.getCalendar().get(Calendar.MONTH) + 1;
            int dia = fn.getCalendar().get(Calendar.DAY_OF_MONTH);
        
            //Creo dos instancias una persona y un youtuber por registrar un youtuber
            persona personaingresar = new persona();
            youtuber personayoutuber = new youtuber();
            
            //Creo la instancia personas que se encuentra en la clasificación de las personas
            personas registrar = new personas();
            
            //Creo una instancia fecha para la fecha de nacimiento del youtuber
            fecha registrarfechapersona = new fecha();
            
            //Guardo los datos del registro de la fecha de nacimiento del youtuber en la instancia creada anteriormente
            registrarfechapersona.setAnual(año);
            registrarfechapersona.setMes(mes);
            registrarfechapersona.setDia(dia);
            
            personaingresar.setIdpersona(Integer.parseInt(idenpersona));
            personaingresar.setNombres(nombrepersona);
            personaingresar.setFechanacimiento(registrarfechapersona);
            
            personayoutuber.setIdyoutuber(Integer.parseInt(idenpersona));
            
            //Agregar persona
            registrar.agregarPersona(personaingresar);
            //Agregar youtuber
            registrar.agregarYoutuber(personayoutuber);
            
            //Consultar personas registradas que sean youtubers
            pyoutuber = registrar.buscarYoutuber(personayoutuber);
            
            String[] titulos = {"Nombre Youtuber","Fecha de Nacimiento","Cantidad de videos"};
            DefaultTableModel model1 = new DefaultTableModel(null, titulos);
            Object[] registros = new Object[3];
                
            for( int i = 0 ; i  < pyoutuber.size(); i++){
               
                registros[0] = pyoutuber.get(i).getNombres();
              
                String diac = String.valueOf(pyoutuber.get(i).getFechanacimiento().getDia());
                String mesc = String.valueOf(pyoutuber.get(i).getFechanacimiento().getMes());
                String anualc = String.valueOf(pyoutuber.get(i).getFechanacimiento().getAnual());
                String fechacompleta = diac+"-"+mesc+"-"+anualc+"";
                registros[1] = fechacompleta;
                
                //System.out.println("lista ----> i "+pyoutuber.get(i).getNombres());
                model1.addRow(registros);
                
            }
            gy.setModel(model1);
            gy.repaint();
            
            
            id.setText("");
            nom.setText("");
            fn.setCalendar(null);
            //registrar.imprimirlistaPersona();
            
        }
            
            
            
            String idyoutuberfollower = null;
            String nombreyoutuberfollower = null;
            String fnyoutuberfollower = null;
            ArrayList<persona> pyoutuberfollower = new ArrayList <persona> ();

            idyoutuberfollower = idyf.getText();
            nombreyoutuberfollower = nomyf.getText();
            
            
            if((!idyoutuberfollower.isEmpty() && !idyoutuberfollower.equals("") && idyoutuberfollower!=null) &&
            (!nombreyoutuberfollower.isEmpty() && !nombreyoutuberfollower.equals("") && nombreyoutuberfollower!=null) &&    
             fnyf.getDate()!=null)
            {
                int añoyf = fnyf.getCalendar().get(Calendar.YEAR);
                int mesyf = fnyf.getCalendar().get(Calendar.MONTH) + 1;
                int diayf = fnyf.getCalendar().get(Calendar.DAY_OF_MONTH);
                //Creo dos instancias una persona y un youtuberfollower para registrar un youtuberfollower
                persona personaingre = new persona();
                youtubeFollower personayoutuberfollower = new youtubeFollower();
                
                //Creo la instancia personas que se encuentra en la clasificación de las personas
                personas registraryoutubefollower = new personas();
                
                //Creo una instancia fecha para la fecha de nacimiento del youtuberFolloer
                fecha registrarfechayoutuberfollower = new fecha();
                
                //Guardo los datos del registro de la fecha de nacimiento del youtuber en la instancia creada anteriormente
                registrarfechayoutuberfollower.setAnual(añoyf);
                registrarfechayoutuberfollower.setMes(mesyf);
                registrarfechayoutuberfollower.setDia(diayf);
                
                personaingre.setIdpersona(Integer.parseInt(idyoutuberfollower));
                personaingre.setNombres(nombreyoutuberfollower);
                personaingre.setFechanacimiento(registrarfechayoutuberfollower);
             
                personayoutuberfollower.setIdyoutuberFollower(Integer.parseInt(idyoutuberfollower));
                
                //Agregar persona
                registraryoutubefollower.agregarPersona(personaingre);
                //Agregar youtuberFollower
                registraryoutubefollower.agregarYoutubeFollower(personayoutuberfollower);
                
                //Consultar personas registradas que sean youtubers
                pyoutuberfollower = registraryoutubefollower.buscarYoutuberFollower(personayoutuberfollower);
            
                String[] titulos = {"Nombre YoutuberFollower","Fecha de Nacimiento"};
                DefaultTableModel model2 = new DefaultTableModel(null, titulos);
                Object[] registros = new Object[2];
                
            for( int j = 0 ; j  < pyoutuberfollower.size(); j++){
               
                registros[0] = pyoutuberfollower.get(j).getNombres();
              
                String diayfc = String.valueOf(pyoutuberfollower.get(j).getFechanacimiento().getDia());
                String mesyfc = String.valueOf(pyoutuberfollower.get(j).getFechanacimiento().getMes());
                String anualyfc = String.valueOf(pyoutuberfollower.get(j).getFechanacimiento().getAnual());
                String fechacompleta = diayfc+"-"+mesyfc+"-"+anualyfc+"";
                registros[1] = fechacompleta;
                
                //System.out.println("lista ----> i "+pyoutuber.get(i).getNombres());
                model2.addRow(registros);
                
            }
            gyf.setModel(model2);
            gyf.repaint();
            
            
            idyf.setText("");
            nomyf.setText("");
            fnyf.setCalendar(null);
                
                
            }
            
            String youtuber = null;
            String titulovideo = null;
            String urlvideo = null;
            
            titulovideo = titulov.getText();
            urlvideo = urlv.getText();
            
            if((listay.getSelectedItem()!=null) &&
            (!titulovideo.isEmpty() && !titulovideo.equals("") && titulovideo!=null) &&    
             (!urlvideo.isEmpty() && !urlvideo.equals("") && urlvideo!=null))
            {
                
                ArrayList<video> vYoutuber = new ArrayList<video>();
                ArrayList<persona> pGeneral = new ArrayList<persona>();
                
                youtuber = (String) listay.getSelectedItem();
                video videoyoutuber = new video();
                persona personavideo = null;
                //Creo la instancia personas que se encuentra en la clasificación de las personas
                personas registrarvideo = new personas();
                
                personavideo = registrarvideo.videoYoutuber(youtuber);
                
                videoyoutuber.setIdyoutubervideo(personavideo.getIdpersona());
                videoyoutuber.setTitulovideo(titulovideo);
                videoyoutuber.setURLvideo(urlvideo);
                
                //Agregar video al youtuber
                registrarvideo.agregarYoutuberVideo(videoyoutuber);
                
                vYoutuber = registrarvideo.consultarVideosYoutuber();
                
                pGeneral = registrarvideo.listaPersonasTodas();
                        
                String[] titulos = {"Youtuber","Titulo","URL"};
                DefaultTableModel mod2 = new DefaultTableModel(null, titulos);
                Object[] registros = new Object[3];
                
                for( int j = 0 ; j  < vYoutuber.size(); j++){
                    
                        for(int l = 0; l < pGeneral.size(); l++){
                            if(vYoutuber.get(j).getIdyoutubervideo() == pGeneral.get(l).getIdpersona()){
                                registros[0] = pGeneral.get(l).getNombres();
                            }
                        }   
                               
                        registros[1] = vYoutuber.get(j).getTitulovideo();
                        registros[2] = vYoutuber.get(j).getURLvideo();
                        mod2.addRow(registros);                    
                        
                }
                
                gridVideos.setModel(mod2);
                gridVideos.repaint();
                
                titulov.setText("");
                urlv.setText("");
                listay.setSelectedItem(null);
                
            }
            
            
    }//GEN-LAST:event_cmdAgregarActionPerformed

    private void listayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listayActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_listayActionPerformed

    private void listayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listayMouseClicked
        // TODO add your handling code here:
        listay.removeAllItems();
        
        ArrayList<persona> plistayoutuber = new ArrayList <persona> ();
        
        personas cargaryoutuber = new personas();
        
        plistayoutuber= cargaryoutuber.comboYoutuber();
        
        if (plistayoutuber != null) {
                
                for (int i = 0; i < plistayoutuber.size(); i++) {
                    listay.addItem(plistayoutuber.get(i).getNombres());
                }
        }
    }//GEN-LAST:event_listayMouseClicked

    private void listayoutubersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listayoutubersMouseClicked
        // TODO add your handling code here:
        
        listayoutubers.removeAllItems();
        
        listavideos.removeAllItems();
        
        ArrayList<youtuber> listayoutuber = new ArrayList <youtuber> ();
        
        ArrayList<persona>  nombreyoutubers = new ArrayList <persona> ();
        
        personas comboboxyoutubers = new personas();
        
        nombreyoutubers = comboboxyoutubers.comboYoutuber();
        
        listayoutuber = comboboxyoutubers.comboYoutuberVideo();
        
        if (nombreyoutubers != null) {
                
                for (int i = 0; i < nombreyoutubers.size(); i++) {
                    listayoutubers.addItem(nombreyoutubers.get(i).getNombres());
                }
        }
        
        String youtuberseleccionado = null;
        
        if(listayoutuber != null && listayoutubers.getSelectedItem()!=null){
            
            youtuberseleccionado = (String) listayoutubers.getSelectedItem();
            
            ArrayList<video> listaVideosYoutuber = new ArrayList<video> ();
            
            for (int i = 0; i < nombreyoutubers.size(); i++) {
                
                if(nombreyoutubers.get(i).getNombres().equals(youtuberseleccionado)){
                    
                    for(int j = 0; j < listayoutuber.size(); j++){
                        if(listayoutuber.get(j).getIdyoutuber()==nombreyoutubers.get(i).getIdpersona()){
                            listaVideosYoutuber = listayoutuber.get(j).getVideosyoutuber();
                            for(int k = 0; k < listaVideosYoutuber.size(); k++){
                                listavideos.addItem(listaVideosYoutuber.get(k).getTitulovideo());
                            }
                        }
                    }
                }
            }
            
        }
        
        
        
    }//GEN-LAST:event_listayoutubersMouseClicked

    public static JPanel getBrowser(String urlvideo){
        JPanel wbPanel = new JPanel(new BorderLayout());
        JWebBrowser webBrowser=new JWebBrowser();
        wbPanel.add(webBrowser, BorderLayout.CENTER);
        webBrowser.setBarsVisible(false);
        webBrowser.navigate(urlvideo);
        
        return wbPanel;
    }
//    public void llenarTabla() {
//
//        javax.swing.JTable tabla;
//        tabla = JTable();
//        tabla = new javax.swing.JTable();
//        DefaultTableModel modelo;
//        modelo = new DefaultTableModel();
//        tabla.setModel(modelo);
//        modelo.addColumn("Nombre");
//        modelo.addColumn("Fecha de Nacimiento");
//        modelo.addColumn("Cantidad de Videos");
//
//    }
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        NativeInterface.open();
        
        NativeInterface.runEventPump();
        
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run(){
                NativeInterface.close();
            }

        }));
        
//        SwingUtilities.invokeLater(new Runnable(){
//        public void run(){
//                    JFrame frame = new JFrame("Video Youtube");
//                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//                    frame.getContentPane().add(getBrowser(), BorderLayout.CENTER);
//                    frame.setSize(400,300);
//                    frame.setVisible(true);
//
//            }
//            }
//        );
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyYoutuberListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyYoutuberListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyYoutuberListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyYoutuberListView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

//        NativeInterface.open();
//        javax.swing.SwingUtilities.invokeLater(new Runnable() {
//            public void run() {
//                MyYoutuberListView window = new MyYoutuberListView();
//                window.setLocationByPlatform(true);
//                window.setLocation(50, 50);
//                window.setVisible(true);
//            }
//        });
//        NativeInterface.runEventPump();
        // don't forget to properly close native components
//        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
//            @Override
//            public void run() {
////                NativeInterface.close();
//            }
//        }));
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyYoutuberListView().setVisible(true);
                
            }
        });
    }

    /**
     * Usa la API http://djproject.sourceforge.net/ns/ para embeber el video de
     * youtube, Para reproducir videos de Youtube
     */
//    public static JPanel getBrowserPanel() {
//        JPanel webBrowserPanel = new JPanel(new BorderLayout());
////        JWebBrowser webBrowser = new JWebBrowser();
////        webBrowserPanel.add(webBrowser, BorderLayout.CENTER);
////        webBrowser.setBarsVisible(false);
////        webBrowser.navigate("https://www.youtube.com/embed/GKiHB5AzihE");
//        //webBrowserPanel.setSize(280,210);
//        return webBrowserPanel;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelVideos;
    private javax.swing.JButton cmdAgregar;
    private javax.swing.JButton cmdBuscar;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdReproducir;
    private javax.swing.JButton cmdeEliminar;
    private javax.swing.JScrollPane gridBusqueda;
    private javax.swing.JTable gridVideos;
    private javax.swing.JTable gy;
    private javax.swing.JTable gyf;
    private javax.swing.JTextField id;
    private javax.swing.JTextField idyf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblBusquedas;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTituloYoutubers;
    private javax.swing.JLabel lblTituloYoutubers1;
    private javax.swing.JLabel lblVideos;
    private javax.swing.JLabel lblVideos1;
    private javax.swing.JLabel lblVideos2;
    private javax.swing.JComboBox<String> listavideos;
    private javax.swing.JComboBox listay;
    private javax.swing.JComboBox<String> listayoutubers;
    private javax.swing.JTextField nom;
    private javax.swing.JTextField nomyf;
    private javax.swing.JPanel panelArtistas;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelBusquedas;
    private javax.swing.JPanel panelDatosArtista;
    private javax.swing.JPanel panelDatosArtista1;
    private javax.swing.JPanel panelFollowers;
    private javax.swing.JPanel panelReproductor;
    private javax.swing.JPanel panelTitulo;
    private javax.swing.JPanel panelVideos;
    private javax.swing.JTabbedPane pestanaYoutubers;
    private javax.swing.JTable tableBusquedas;
    private javax.swing.JTextField titulov;
    private javax.swing.JTextField urlv;
    // End of variables declaration//GEN-END:variables

   

}
